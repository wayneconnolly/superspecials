resources:
  containers:
  - container: terraform_container
    image: lenisha/terraform-light

pool:
  vmImage: 'Ubuntu 20.04'

container: terraform_container

trigger:
  branches:
    include:
    - master

steps:
- task: NodeTool@0
  inputs:
    versionSpec: '10.x'
  displayName: 'Install Node.js'

- script: |
    npm install -g gatsby-cli
  displayName: 'install gatsby'

- script: |
    npm install
    gatsby build
  displayName: 'gatsby build'
 

- task: CopyFiles@2
  inputs:
    sourceFolder: 'public'
    contents: '**' 
    targetFolder: $(Build.ArtifactStagingDirectory)
    cleanTargetFolder: true 
  displayName: 'copy Super Specials site'

- task: PublishBuildArtifacts@1
  inputs:
    pathtoPublish: '$(Build.ArtifactStagingDirectory)' 
    artifactName: 'super' 
    publishLocation: 'Container' 

- task: DownloadBuildArtifacts@0
  inputs:
    buildType: 'current' # Options: current, specific
    #project: 'gatsby-starter-default' # Required when buildType == Specific
    #pipeline: 'super-specials' # Required when buildType == Specific
    #specificBuildWithTriggering: false # Optional
    #buildVersionToDownload: 'latest' # Required when buildType == Specific# Options: latest, latestFromBranch, specific
    #branchName: 'refs/heads/master' # Required when buildType == Specific && BuildVersionToDownload == LatestFromBranch
    #buildId: # Required when buildType == Specific && BuildVersionToDownload == Specific
    #tags: # Optional
    downloadType: 'single' # Options: single, specific
    artifactName: 'super' # Required when downloadType == Single
    #itemPattern: '**' # Optional
    downloadPath: '.' 
    #parallelizationLimit: '8' # Optional
  


- script: |
    ls -la
  displayName: 'Display contents'


# create the service principle...  
# az login
# az ad sp create-for-rbac --name wayne-superspecials

- script: |
    
    az login --service-principal -u $(ARM_CLIENT_ID) -p $(ARM_CLIENT_SECRET) --tenant $(ARM_TENANT_ID)
  displayName: 'Enable AZ  Login'

- script: |
    cd deploy/terraform
    terraform init -backend-config=backend.tfvars
    az storage blob lease break -b gatsby-starter-default.terraform.tfstate -c "vstsbuildterraform" --account-name $(ARM_CLIENT_ID) --account-key $(ARM_ACCESS_KEY)
    terraform apply -auto-approve -var dns_name=$(BLOB_NAME)
  displayName: 'Terraform init, plan and apply'
  env:
      ARM_TENANT_ID: $(ARM_TENANT_ID)
      ARM_SUBSCRIPTION_ID: $(ARM_SUBSCRIPTION_ID)
      ARM_CLIENT_ID: $(ARM_CLIENT_ID)
      ARM_CLIENT_SECRET: $(ARM_CLIENT_SECRET)
      ARM_ACCESS_KEY: $(ARM_ACCESS_KEY)
      

#- script: |
#    az storage blob delete-batch -s \$web --account-name $(BLOB_NAME)
#  displayName: 'clean content'

- script: |
    az storage blob upload-batch -s super -d \$web --account-name $(BLOB_NAME)
  displayName: 'copy content and site is ready https://$(BLOB_NAME).azureedge.net/index.html'